Q1:Will I need to update a board and then check whether move is valid?
A1: Not if I track all pins, and all attackes squares


Q2:How do I track draw by repetition?

When I have promoted a pawn, how will I track 3 bishops? -> data structure
cannot be rigid


Q3:How do I track the king ? I have problems with check, with castling
A1: Refer to Q1A1



Q4:CHECK: The problem of king movement

QA:No other move is possible when king is in check. How do I implement this?
Check_flag ? 
Move only the king if in check will not succeed. Need to implement a mechanism
for 'piece madhe ghalne' -> function to handle checks, a structure for the
squares through which check comes. Simply piece movement check is not the only
way to give check.
Need to update board after each possible move and check 
bool kingincheck_(player, board, opponent_pieces) {
	update_pieces()
	while () {                                                                                                                                                    
		search(king_square, piece_possible_moves, (for all enemy pieces);
		threat_square_struct
	}
	
}

Multiple pieces can check the king at the same time!


Q5:Should I use bit-boards?
A1:It may become complicated. However, will be very useful when tracking
attacked squares.
But, when I want to count controlled squares, or supported pieces, the bitwise
operations to be done will become more complicated.
More important, I have not designed bitboards myself, and probably should use
a structure I have created


Q6: Should I actually track all possible moves of each piece in some
structure? 
A1:Then it will need to be updated every turn when the piece is not moving, and rebuilt every
turn when the piece moves.


Q6b. Why not check individually everytime? Morever, I don't need to check all
pieces if I check individualy?
A1: But that is only when I want to validate player moves. When I want to
generate moves, I will have to track all possible moves anyway (for atleast
one player.
Calculation: 8 * 8 bits for the 8 directions (safe to use even if 4 directions
used) 
0th bit for "direction enable"
An 8 bit register for meta-bits? Pinned->direction
An 8 bit register for knight moves
An 8 bit register for king or pawn ENABLE


Q7: How do I show the board?


Q8: How do I handle pins and king movement when piece movement and king
movement  are interwined with moves of the opponent (and one side's moves must
	be calculated before the other) ?
A1: The problem is that one requires the legal moves of the other player

A tentative solution is (assuming black to move (do not know significance of
		who is to move, just assuming it)
unplayer_moves()
player_moves()
unplayer_pins() /* assuming pins do not affect unplayer_moves */
player_pins()
unplayer_king()
player_king()

What is proposed is thus: we calculate all psuedocorrect moves (which we have
	to track anyway)
Then we generate the pin bits


Q9: There are junctures where by passing pointers around, the size of the
source code can be significantly reduced. (Invloving a function calling
another function. What should be sacrificed? Pointer dereferencing or source
code size?


Q10: What is the best way to track pins?
A1:
Answer assumes 'calculate_all' has been run before calculate_pins
Find whether king is in 'range' of sliding pieces
	If yes, check whether the piece is making a 'kill'
		If yes, check number of pieces between kill and king
			If 0, then the attacked piece is pinned in the opposite of that particular
	If No, then check difference between (distance between king and piece, max movement distance in direction)
		If 1
			King is under check from that direction


Q11: How to handle correctness of move when king is under check?
A1: First put the move through the piece-test
Then, if the king is not under check:
	The move is correct
Otherwise:
	If the king is under multiple checks:
		the move is wrong
	If the moves to: position s.t: attacking square <= position < king
		the move is correct
	
	The move is wrong
If the piece is the king itself: 
If movement is along or opposite check direction, wrong move
A1(B): While generating moves, generate all 


Q12: How do I track all the attacks on the king?
A1:In the pin_check_calc() function, I can build a list of attack on the king
moves
Now while generating moves, if I include the check thing in the function, then
for sliding pieces, knight, pawn and king, procedure will be:
loop:
	Generate_next_legal_move(): 
	if valid for saving king, store
	else, go to next
Note: It seems that slide direction numbers should pass through the enemy king

So there will be a function with 4 different loops each containing check
evasion logic

Alternately, 
loop: generate legal moves in a list

then remove all illegal moves from the list. 
This is looked upon badly

Q13: Scared and King Moves Again:
A1:
Generation.
For all squares surrounding the king:
	Block squares which are along or opposite to check direction
	If square is occupied by friendly piece, block square:
	If any opponent piece can move to a particular square, block square
remaining squares form legal moves

Validation:
	If occupied by friendly piece, along or opp check direction, opponent
	piece can move / supported by opponent piece-> invalid
	Else valid

Q14: Is too big a program necessarily a bad thing?
A1: Big code is definitely difficult to mantain. Maybe a few runs are required
to remove needless code, prune it. How important is this?. Also, I am
sometimes needing a bit of thinking to understand code I have written. A
commenting run is probably needed

Q15: If storing moves anyway, why not store the piece at the end of the slide?
That way, I can also track what things I can kill! Storage for knight, king,
     pawn seems too much work. But should I keep things uniform?
A1:
Storing the piece at the end of the slide is a good idea, as for sliding
pieces, I have to go along the direction to see what I can kill. But for K, N,
	P, the pieces that can be killed are right there, at the board,
	waiting to be directly accessed

There is however the problem of being uniform, which remains unresolved. Also,
      a lot of space is wasted for non-sliding pieces, which can be put to
      good use. When there is a query about a piece, I DON't NEED TO LOOK AT
      THE BOARD!
The dirs[] array can be used for king to track pins as well as occupied-ness
of surrounding squares. (3 bits for attacked / friendly piece code) 
For the knight, most of the space will be wasted- 4 bits: unnocupied,
    friendly, not in range, enemy

Q16. How to hunt bugs?
I wish I knew. A couple of elementary mistakes destroy days. "Think Twice Code
Once"

Q17. Is castling legal if ROOK is attacked?
A: Yes. Only the squares which the king moves through should not be attacked
https://en.wikipedia.org/wiki/Castling

Q18. Should I break the encapsulation to optimize the code ?
When checking for checkmate, I can do 
a. call can_move for all squares around the king
b. check all the squares manually

Similarly, for possible piece movement, I can call
a. can_move for all squares in check slide
b. see the squares stored in the piece manually

I know that all that if-else need not run for this, as I don't need to perform
wrapper checks- I am generating the possible moves myself rather than taking
input from the user.
But this will require me to write repetitive code


	code not required | code required   <- can_move
              |			 |
without calling this   <----cannot call this

But if I do this manually, then I will again need to write the same
(code_required code)
ANS: I will call can_move(). who will write the same code again? 
&&** optimization, that's what I say (&&** means 'burn')

Q18: What is the problem with enpass?
The final position of the piece which kills and the position of the pieces
which is killed are different
So, enpass must be handled specially, not in the vanilla_can_move function,
which handles only pieces that are in the killer's range!
This might prove ok when the king is not in check, but what if the king is
checked by the pawn which will be the target of the enpass?
Then the complexity will become too large to handle
So, I am postponing enpass to infinity

Q19. How to make user I/O strict?
Using getchar() to get a single character is foolish. So I propose to use
readline() everywhere, then validate the content of the line
