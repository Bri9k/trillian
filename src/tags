!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALTERNATE_UPDATE	moves.c	16;"	d	file:
BOARD_H	board.h	2;"	d
DEBUG	main.c	12;"	d	file:
DEBUG_CALCULATE	main.c	14;"	d	file:
DEBUG_CALCULATE	moves.c	12;"	d	file:
DEBUG_INTERFACE	main.c	13;"	d	file:
DEFAULT_PATH	main.c	11;"	d	file:
DEFS_H	defs.h	2;"	d
DIR_NONE	moves.c	40;"	d	file:
DISPLAY_h	display.h	2;"	d
FEN_TOKENS	board.c	8;"	d	file:
FLAGS	Makefile	/^FLAGS = -Wall -std=c89 -O3 #-fsanitize=address$/;"	m
FlagsForFile	.ycm_extra_conf.py	/^def FlagsForFile( filename, **kwargs ):$/;"	f
INPUT_H	input.h	2;"	d
MAX	input.h	4;"	d
MAX_PIECES	pieces.h	6;"	d
MOVES_H	moves.h	2;"	d
MOVES_MODE	display.h	7;"	d
NONE	board.h	7;"	d
NONE_CO_ORD	board.h	8;"	d
PIECES_H	pieces.h	2;"	d
READ_MODE	display.h	6;"	d
SEPERATE_FUNCTIONS	moves.c	14;"	d	file:
SLIDE_KILL	moves.c	19;"	d	file:
blacks	pieces.h	/^	piece blacks[MAX_PIECES];$/;"	m	struct:__anon5
board_position	board.c	/^square board_position(chessboard board, position p) {$/;"	f
brd	board.h	/^	square brd[8][8]; \/* contains characters in SAN notation which represent pieces *\/$/;"	m	struct:__anon3
c	input.h	/^	command c;$/;"	m	struct:__anon8
calculate_all	moves.c	/^void calculate_all(chesset *set, chessboard board) {$/;"	f
calculate_piece	moves.c	/^void calculate_piece(piece *p, chessboard ch) {$/;"	f
can_attack	moves.c	/^int can_attack(piece p, position ps, chessboard ch) {$/;"	f
can_move	moves.c	/^int can_move(piece p, position sq, chessboard ch) {$/;"	f
can_slide	moves.c	27;"	d	file:
castling	board.h	/^	usint castling; \/* X X X X B-queenside B-kingside W-kingside W-queenside *\/$/;"	m	struct:__anon3
chessboard	board.h	/^}chessboard;$/;"	t	typeref:struct:__anon3
chesset	pieces.h	/^}chesset;$/;"	t	typeref:struct:__anon5
command	input.h	/^typedef enum commandtype command;$/;"	t	typeref:enum:commandtype
commandtype	input.h	/^enum commandtype {$/;"	g
deltarank	moves.c	31;"	d	file:
dfile	moves.h	/^	usint dfile, drank;$/;"	m	struct:__anon6
dir_incr	pieces.h	/^	usint dir_start, dir_incr; \/*Q-> 0, 1. R-> 0, 2. B-> 1, 2 *\/$/;"	m	struct:__anon4
dir_start	pieces.h	/^	usint dir_start, dir_incr; \/*Q-> 0, 1. R-> 0, 2. B-> 1, 2 *\/$/;"	m	struct:__anon4
dirs	pieces.h	/^	usint dirs[8]; \/* w, nw, n, ne, e, se, s, sw *\/$/;"	m	struct:__anon4
display	display.c	/^void display(chessboard board, int mode) {$/;"	f
dist	moves.c	37;"	d	file:
drank	moves.h	/^	usint dfile, drank;$/;"	m	struct:__anon6
enpass_target	board.h	/^	position enpass_target; \/* the square to which enpass is allowed (there is only one) *\/$/;"	m	struct:__anon3
extract_move	input.c	/^move extract_move(char string[]) {$/;"	f
fenstring_to_board	board.c	/^int fenstring_to_board(chessboard *board, char fenstring[]) {$/;"	f
file	board.h	/^	usint rank, file;$/;"	m	struct:__anon2
fileincr	moves.c	/^ssint fileincr(usint direction) {$/;"	f
filename_ins	input.h	/^	filename_ins$/;"	e	enum:commandtype
fin	moves.h	/^	position fin;$/;"	m	struct:__anon7
find_dir	moves.c	/^usint find_dir(movement sl) {$/;"	f
find_movement	moves.c	/^movement find_movement(move mv) {$/;"	f
fullmoves	board.h	/^	usint fullmoves; \/* number of black moves *\/$/;"	m	struct:__anon3
game_ins	input.h	/^	game_ins,$/;"	e	enum:commandtype
get_fentok	board.c	/^int get_fentok(char tok[], char str[], int reset) {$/;"	f
halfmoves	board.h	/^	usint halfmoves; \/* number of non-pawn and non capture moves (for 50 move rule) *\/$/;"	m	struct:__anon3
index	board.h	/^	ssint index; \/* index in piece array in set *\/$/;"	m	struct:__anon1
ini	moves.h	/^	position ini;$/;"	m	struct:__anon7
inrange	defs.h	12;"	d
instruction	input.h	/^	usint instruction;$/;"	m	struct:__anon8
interface_board_set	pieces.c	/^void interface_board_set(chessboard *board, chesset *set) {$/;"	f
isBlack	defs.h	8;"	d
isDifferent	moves.c	22;"	d	file:
isSame	moves.c	21;"	d	file:
isWhite	defs.h	7;"	d
kill_piece	pieces.c	/^void kill_piece(chesset *set, square sq) {$/;"	f
knight_move	moves.c	/^int knight_move(piece q, position sq, chessboard ch){$/;"	f
main	main.c	/^int main(int argc, char *argv[]) {$/;"	f
make_move	moves.c	/^void make_move(chessboard *board, chesset *set, move mv) {$/;"	f
mkpositive	moves.c	35;"	d	file:
move	moves.h	/^}move;$/;"	t	typeref:struct:__anon7
move_ins	input.h	/^	move_ins,$/;"	e	enum:commandtype
movement	moves.h	/^}movement;$/;"	t	typeref:struct:__anon6
mv	input.h	/^	move mv;$/;"	m	struct:__anon8
n_black	pieces.h	/^	int n_black;$/;"	m	struct:__anon5
n_white	pieces.h	/^	int n_white;$/;"	m	struct:__anon5
oppDir	moves.c	42;"	d	file:
oppKing	moves.c	29;"	d	file:
pawn_move	moves.c	/^int pawn_move(piece q, position sq, chessboard ch) {$/;"	f
pawndir	moves.c	33;"	d	file:
pc	board.h	/^	char pc; \/* representation of piece *\/$/;"	m	struct:__anon1
piece	pieces.h	/^	char piece;$/;"	m	struct:__anon4
piece	pieces.h	/^}piece;$/;"	t	typeref:struct:__anon4
piece_can_slide	moves.c	/^int piece_can_slide(piece p, position sq, chessboard ch) {$/;"	f
pin_dir	pieces.h	/^	usint pin_dir;$/;"	m	struct:__anon4
player	board.h	/^	char player; \/* 'w' white 'b' black to move *\/$/;"	m	struct:__anon3
position	board.h	/^}position;$/;"	t	typeref:struct:__anon2
print_move	defs.h	10;"	d
ps	pieces.h	/^	position ps;$/;"	m	struct:__anon4
rank	board.h	/^	usint rank, file;$/;"	m	struct:__anon2
rankincr	moves.c	/^ssint rankincr(usint direction) {$/;"	f
readline	input.c	/^unsigned readline(char string[], unsigned maxlen) {$/;"	f
safe_atoi	board.c	/^int safe_atoi(char string[]) {$/;"	f
set_piece	pieces.c	/^void set_piece(piece *p, char pc, int rank, int file) {$/;"	f
show_set	pieces.c	/^void show_set(chesset set) {$/;"	f
slide_update	moves.c	26;"	d	file:
slidingPiece	moves.c	24;"	d	file:
square	board.h	/^}square;$/;"	t	typeref:struct:__anon1
ssint	defs.h	/^typedef char ssint; \/* for changes in direction *\/$/;"	t
string	input.h	/^	char string[MAX];$/;"	m	struct:__anon8
token	input.h	/^}token;$/;"	t	typeref:struct:__anon8
update_slide	moves.c	/^void update_slide(piece *p, chessboard ch, usint direction) {$/;"	f
usint	defs.h	/^typedef unsigned char usint; \/* for rank and file, slide words *\/$/;"	t
valid_enpass_square	board.c	9;"	d	file:
verify_calculation	moves.c	/^void verify_calculation(chesset set, chessboard board) {$/;"	f
verify_interface	pieces.c	/^void verify_interface(chessboard board, chesset set) {$/;"	f
whites	pieces.h	/^	piece whites[MAX_PIECES];$/;"	m	struct:__anon5
